defmodule TokenManager.Tokens.TokenTest do
  use ExUnit.Case

  import Mox

  alias TokenManager.Repo
  alias TokenManager.Tokens.Token

  # Make sure mocks are verified when the test exits
  setup :verify_on_exit!

  setup do
    :ok = Ecto.Adapters.SQL.Sandbox.checkout(Repo)
  end

  @params %{
    status: "available"
  }

  test "creates a valid token" do
    changeset = Token.changeset(@params)

    assert changeset.valid?
    assert changeset.changes.status == "available"

    # Ensure uuid is not present in changeset if generated by DB
    assert Map.has_key?(changeset.changes, :uuid)
    assert changeset.data.uuid == nil

    assert Map.keys(changeset.changes) == [:status, :uuid]

    assert changeset.errors == []

    # Ensure timestamps are not set before DB insert
    assert changeset.data.inserted_at == nil
    assert changeset.data.updated_at == nil
  end

  test "returns error when required params are missing or invalid" do
    # Missing status
    changeset = Token.changeset(%{})

    refute changeset.valid?
    assert {:status, {"can't be blank", [validation: :required]}} in changeset.errors

    # Invalid status
    changeset = Token.changeset(%{status: "invalid-status"})

    refute changeset.valid?
    assert {:status, {"is invalid", [validation: :inclusion, enum: ["active", "available"]]}} in changeset.errors
  end

  test "persists a token to the database" do
    {:ok, token} =
      @params
      |> Token.changeset()
      |> Repo.insert()

    assert token.status == "available"
    assert is_binary(token.uuid)
    assert byte_size(token.uuid) == 36 # UUID v4
    assert token.inserted_at != nil
    assert token.updated_at != nil
  end
end
